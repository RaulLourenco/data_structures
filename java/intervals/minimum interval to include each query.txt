//O(nlog(n) + qlog(q)) Time & O(n+q) Space - where n is the number of intervals
//and q is the number of queries
class Solution {
    public int[] minInterval(int[][] intervals, int[] queries) {
        Arrays.sort(intervals, (a,b) -> Integer.compare(a[0], b[0]));

        PriorityQueue<Pair<Integer, Integer>> minHeap = new PriorityQueue<>((a,b) -> a.getKey() - b.getKey());
        
        int index = 0;
        Map<Integer, Integer> map = new HashMap<>();
        int[] copy = queries.clone();
        Arrays.sort(copy);

        for(int q : copy) {
            while(index < intervals.length && intervals[index][0] <= q) {
                int left = intervals[index][0], right = intervals[index][1];
                minHeap.offer(new Pair(right - left + 1, right));
                index++;
            }

            while(!minHeap.isEmpty() && minHeap.peek().getValue() < q) {
                minHeap.remove();
            }

            int ans = minHeap.isEmpty() ? -1 : minHeap.peek().getKey();
            map.put(q, ans);
        }

        int[] res = new int[queries.length];
        index = 0;
        for(int q : queries) {
            res[index++] = map.get(q);
        }

        return res;
    }
}